#!/usr/bin/env python3

import argparse, datetime, glob, os, os.path, re, sys

script = os.path.basename(__file__)
clsfiles = ['maya.pdf', 'mfo.jpg', 'snapshotmfo.cls', 'trackchanges.sty']

def mylog(a):
  'logs message or list of messages, one per line'
  if isinstance(a, str):
    b = [a,]
  else:
    b = a
  for line in b:
    print(script + ': ' + line, flush = True)

def mylogtime(*a):
  'logs current time'
  if a:
    b = a[0]
  else:
    b = 'current'
  mylog(f'{b} time: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

def mydel(x, dry = False):
  'deletes file or list of files'
  if isinstance(x, str):
    y = [x,]
  else:
    y = x
  for f in y:
    if os.path.exists(f):
      try:
        if not dry:
          os.remove(f)
        mylog(f"file '{f}' deleted")
      except OSError:
        mylog(f"error deleting file '{f}'")

def do(
  workdir,
  allsubs,
  chosensubs = None,
  pdf = False,
  tex = False,
  cls = False,
  res = False,
  dry = False
):
  mylogtime('start')

  ## determine subdirectories to process
  if not chosensubs:
    chosensubs = allsubs
  chosensubs = sorted(list(set(chosensubs)))

  ## main program
  st = False
  endings = ['aux', 'bib', 'bbl', 'blg', 'log', 'out',]
  if pdf: endings.append('pdf')
  if tex: endings.append('tex')
  files = ['doc_data.txt',]
  if cls: files.extend(clsfiles)
  for s in chosensubs:
    os.chdir(workdir)
    mylog(f"descending into subdirectory '{s}' ...")
    os.chdir(s)
    mydel(files, dry = dry)
    for ending in endings:
      mydel(sorted(glob.glob('autogenerated-*.' + ending)), dry = dry)
      if ending != 'tex':
        mydel(sorted(glob.glob('test-*.' + ending)), dry = dry)
      if res:
        mydel(sorted(glob.glob('01_result*.pdf')), dry = dry)
    if not re.match('junioreditor', s):
      st = True

  ## delete overall standard result
  os.chdir(workdir)
  if res and st:
    mydel('01_result_standard.pdf', dry = dry)

  mylogtime('end')

if __name__ == '__main__':
  progdir = os.path.dirname(os.path.realpath(__file__))
  workdir = os.path.join(progdir, '../data')
  allsubs = sorted(next(os.walk(workdir))[1])

  ## parse command line
  parser = argparse.ArgumentParser(description = 'remove temporary files in given directory')
  parser.add_argument(
    '-s',
    '--sub',
    choices = allsubs,
    action = 'append',
    help = f'Data subdirectories to process. Without arguments, all subdirectories are processed.'
  )
  parser.add_argument(
    '--pdf',
    action = 'store_true',
    help = 'include autogenerated-*.pdf and test-*.pdf'
  )
  parser.add_argument(
    '--tex',
    action = 'store_true',
    help = 'include autogenerated-*.tex, but not test-*.tex'
  )
  parser.add_argument(
    '--cls',
    action = 'store_true',
    help = 'include the class file and others'
  )
  parser.add_argument(
    '--res',
    action = 'store_true',
    help = 'include 01_result*.pdf'
  )
  parser.add_argument(
    '-n',
    '--dry',
    action = 'store_true',
    help = 'pretend only to execute the tasks'
  )
  args = parser.parse_args()

  do(
    workdir,
    allsubs,
    chosensubs = args.sub,
    pdf = args.pdf,
    tex = args.tex,
    cls = args.cls,
    res = args.res,
    dry = args.dry
  )

  #input('Press RETURN to proceed!')

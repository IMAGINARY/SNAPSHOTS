#!/usr/bin/env python3

import argparse, glob, os, os.path, sys
from datetime import datetime

script = os.path.basename(__file__)
clsfiles = ['maya.pdf', 'mfo.jpg', 'snapshotmfo.cls', 'trackchanges.sty']

def mylog(a):
  print(script + ': ' + a, flush = True)

def do(
  workdir,
  subs,
  sub = None,
  pdf = False,
  tex = False,
  cls = False,
  res = False,
  dry = False
):
  global script
  mylog(f'start time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

  ## determine subdirectories to process
  if not sub:
    sub = subs

  ## main program
  endings = ['aux', 'bib', 'bbl', 'blg', 'log', 'out',]
  if pdf: endings.append('pdf')
  if tex: endings.append('tex')
  files = ['doc_data.txt',]
  if cls: files.extend(clsfiles)
  for s in sub:
    os.chdir(workdir)
    mylog(f"descending into subdirectory '{s}' ...")
    os.chdir(s)
    fc = files.copy()
    for ending in endings:
      fc.extend(sorted(glob.glob('autogenerated-*.' + ending)))
      if ending != 'tex':
        fc.extend(sorted(glob.glob('test-*.' + ending)))
      if res:
        fc.extend(sorted(glob.glob('01_result*.pdf')))
    
    for f in fc:
      if os.path.exists(f):
        try:
          if not dryrun:
            os.remove(f)
  #        mylog(f"file '{f}' deleted")   
        except OSError:
          mylog(f"error deleting file '{f}'")
  
  mylog(f'end time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
  
  #input('Press RETURN to proceed!') 

if __name__ == '__main__':
  progdir = os.path.dirname(os.path.realpath(__file__))
  workdir = os.path.join(progdir, '../data')
  subs = sorted(next(os.walk(workdir))[1])
  
  ## parse command line
  parser = argparse.ArgumentParser(description = 'remove temporary files in given directory')
  parser.add_argument(
    '-s',
    '--sub',
    choices = subs,
    action = 'append',
    help = f'Data subdirectories to process. Without arguments, all subdirectories are processed.'
  )
  parser.add_argument(
    '--pdf',
    action = 'store_true',
    help = 'include autogenerated-*.pdf and test-*.pdf'
  )
  parser.add_argument(
    '--tex',
    action = 'store_true',
    help = 'include autogenerated-*.tex, but not test-*.tex'
  )
  parser.add_argument(
    '--cls',
    action = 'store_true',
    help = 'include the class file and others'
  )
  parser.add_argument(
    '--res',
    action = 'store_true',
    help = 'include 01_result*.pdf'
  )
  parser.add_argument(
    '-n',
    '--dry',
    action = 'store_true',
    help = 'pretend only to execute the tasks'
  )
  args = parser.parse_args()

  do(
    workdir,
    subs,
    sub = args.sub,
    pdf = args.pdf,
    tex = args.tex,
    cls = args.cls,
    res = args.res,
    dry = args.dry
  )


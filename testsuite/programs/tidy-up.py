#!/usr/bin/env python3

import argparse, glob, os, os.path, platform, sys

script = os.path.basename(__file__)
progdir = os.path.dirname(os.path.realpath(__file__))
workdir = os.path.join(progdir, '../data')
subs = next(os.walk(workdir))[1]
clsfiles = ['maya.pdf', 'mfo.jpg', 'snapshotmfo.cls', 'trackchanges.sty']

parser = argparse.ArgumentParser(description = 'remove temporary files in given directory')
parser.add_argument(
  'vars',
  nargs = '*',
  help = f'Data subdirectories to process. Admissible values: {", ".join(subs)}.\
  Without arguments, all subdirectories are processed.'
)
parser.add_argument(
  '--pdf',
  action = 'store_true',
  help = 'include autogenerated-*.pdf and test-*.pdf'
)
parser.add_argument(
  '--tex',
  action = 'store_true',
  help = 'include autogenerated-*.tex, but not test-*.tex'
)
parser.add_argument(
  '-p',
  '--purge',
  action = 'store_true',
  help = 'include the class file and others'
)
parser.add_argument(
'-n',
'--dryrun',
action = 'store_true',
help = 'only pretend to execute all the work'
)
args = parser.parse_args()

## determine subdirectories to process
if len(args.vars) > 0:
  mysubs = []
  for v in args.vars:
    if v in subs:
      mysubs.append(v)
    else:
      print(f"{script}: ignoring '{v}' as it is not a subdirectory name")
  mysubs = list(set(mysubs))
  if len(mysubs) > 0:
    print(f'{script}: {len(mysubs)} of {len(subs)} possible subdirectories chosen')
  else:
    print(f'{script}: no subdirectory chosen, nothing to do')
    sys.exit(0)
else:
  mysubs = subs
  print(f'{script}: processing all subdirectories as no command line arguments are present')

print(f'{script}: tidying up')

endings = ['aux', 'bib', 'bbl', 'blg', 'log', 'out',]
if args.pdf: endings.append('pdf')
if args.tex: endings.append('tex')
files = ['doc_data.txt',]
if args.purge: files.extend(clsfiles)
for t in mysubs:
  os.chdir(workdir)
  os.chdir(t)
  print(f"{script}: descending into subdirectory '{t}'")
  fc = files.copy()
  for ending in endings:
    fc.extend(glob.glob('autogenerated-*.' + ending))
    if ending != 'tex':
      fc.extend(glob.glob('test-*.' + ending))
  
  for f in fc:
    if os.path.exists(f):
      try:
        if not args.dryrun:
          os.remove(f)
        print(f"{script}: file '{f}' deleted")   
      except OSError:
        print(f"{script}: error deleting file '{f}'")

#input('Press RETURN to proceed!') 

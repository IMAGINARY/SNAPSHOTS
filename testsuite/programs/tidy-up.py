#!/usr/bin/env python3

import argparse, glob, os, os.path, platform, sys
from datetime import datetime

script = os.path.basename(__file__)
progdir = os.path.dirname(os.path.realpath(__file__))
workdir = os.path.join(progdir, '../data')
subs = next(os.walk(workdir))[1]
clsfiles = ['maya.pdf', 'mfo.jpg', 'snapshotmfo.cls', 'trackchanges.sty']

def mylog(a):
  print(script + ': ' + a, flush = True)
  
mylog(f'start time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

## parse command line
parser = argparse.ArgumentParser(description = 'remove temporary files in given directory')
parser.add_argument(
  '-s',
  '--sub',
  choices = subs,
  action = 'append',
  help = f'Data subdirectories to process. Without arguments, all subdirectories are processed.'
)
parser.add_argument(
  '--pdf',
  action = 'store_true',
  help = 'include autogenerated-*.pdf and test-*.pdf'
)
parser.add_argument(
  '--tex',
  action = 'store_true',
  help = 'include autogenerated-*.tex, but not test-*.tex'
)
parser.add_argument(
  '-p',
  '--purge',
  action = 'store_true',
  help = 'include the class file and others'
)
parser.add_argument(
  '--res',
  action = 'store_true',
  help = 'include 01_result*.pdf'
)
parser.add_argument(
'-n',
'--dryrun',
action = 'store_true',
help = 'pretend only to execute the tasks'
)
args = parser.parse_args()
#mylog(f"options are {args}")

## determine subdirectories to process
if not args.sub:
  args.sub = subs

## main program
endings = ['aux', 'bib', 'bbl', 'blg', 'log', 'out',]
if args.pdf: endings.append('pdf')
if args.tex: endings.append('tex')
files = ['doc_data.txt',]
if args.purge: files.extend(clsfiles)
for sub in args.sub:
  os.chdir(workdir)
  mylog(f"descending into subdirectory '{sub}' ...")
  os.chdir(sub)
  fc = files.copy()
  for ending in endings:
    fc.extend(glob.glob('autogenerated-*.' + ending))
    if ending != 'tex':
      fc.extend(glob.glob('test-*.' + ending))
    if args.res:
      fc.extend(glob.glob('01_result*.pdf'))
  
  for f in fc:
    if os.path.exists(f):
      try:
        if not args.dryrun:
          os.remove(f)
#        mylog(f"file '{f}' deleted")   
      except OSError:
        mylog(f"error deleting file '{f}'")

mylog(f'end time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')

#input('Press RETURN to proceed!') 
